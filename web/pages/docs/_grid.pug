extends ../../layout/doc

append config
  - var title = 'Mojo Layout Laboratory'
  - var metaDesc = 'Grid & Layout Testbed'
  - var icon = 'gear'
  - var parent = 'style-guide'
  - var slug = 'grid'
  - var cssFile = 'layout'
  - var pageCSS = 'css/website'

block content
  .container.main-content
    .row
      .col-12
        +docs-heading('grid', 'theGRID')

  .container.main-content
    .row
      .col-12
        p.doc-intro
          | Grid layout modules are more flexible than a hot yoga instructor. Like a Tai Chi master flowing energy, Huement UI guides and shapes the page's content effortlessly. Automatically dance like a prima ballerina across breakpoints and screen orientations.

        p.intro
          | A responsive grid system based on&nbsp;
          a(href="http://flexboxgrid.com/")  Flexbox Grid
          | and the #[code flex property]. This flexbox grid component allows for a responsive, fluid, mobile first layout! All of this is easily achieved with a minimal amount of markup.

        p.intro
          | This grid is heavily adapted from #[code Bootstrap v5.2.X's Grid] codebase. It has been modified to support being scoped to a parent class, with some other minor tweaks and additions that are documented below. When you are starting a project, a strong foundation is everything.

        p(style='font-style:italic')
          | This grid is going to put your content where you want it, on any screen size, and then get out of your way.

        ul.features-list.my-3
          li Battle Tested, Mother Approved
          li Customize any part thanks to Sass! Columns, Gaps, etc.
          li From 'XS' extra small to 'XX' double extra large breakpoints
          li Every feature has responsive classes. Pixel perfect controls.


        :markdownify
          ## How it works

          Bootstrap's grid system uses a series of containers, rows, and columns to layout and align content. It's built with [flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox) and is fully responsive. Below is an example and an in-depth look at how the grid comes together.

          **New to or unfamiliar with flexbox?** [Read this CSS Tricks flexbox guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-background) for background, terminology, guidelines, and code snippets.


        :codeblock(lang="html" previewClass="row-previews")
          <div class="container">
            <div class="row">
              <div class="col-sm">
                One of three columns
              </div>
              <div class="col-sm">
                One of three columns
              </div>
              <div class="col-sm">
                One of three columns
              </div>
            </div>
          </div>


        .row.center-xs.content-block
          .col-xs-12.col-md-8
            h2
              span(class="h2-accent-mark") ⁋
              | Responsive and Fluid
            p
              | Responsive modifiers let you define column sizes, offsets, alignment and distribution at xs, sm, md &amp; lg viewport widths. Use the row class to define an outer row of columns and then place columns inside of rows.
              a(href='/views/classes.html') See all classes

        :highlightify(lang="html")
          <div class="row">
            <div class="col-xs-12 col-sm-8 col-md-6 col-lg-4"></div>
          </div>

        .container-fluid
          .row.example
            .col-xs-12.col-sm-3.col-md-2.col-lg-1
            .col-xs-6.col-sm-6.col-md-8.col-lg-10
            .col-xs-6.col-sm-3.col-md-2.col-lg-1
            .col-xs-12.col-sm-3.col-md-2.col-lg-1
            .col-xs-12.col-sm-9.col-md-10.col-lg-11
            .col-xs-10.col-sm-6.col-md-8.col-lg-10
            .col-xs-2.col-sm-6.col-md-4.col-lg-2

        div.styled-box
          :markdownify
            The above example creates three equal-width columns on small, medium, large, and extra large devices using our predefined grid classes. Those columns are centered in the page with the parent `.container`.

            Breaking it down, here's how it works:

            - Containers provide a means to center and horizontally pad your site's contents. Use `.container` for a responsive pixel width or `.container-fluid` for `width: 100%` across all viewport and device sizes.
            - Rows are wrappers for columns. Each column has horizontal `padding` (called a gutter) for controlling the space between them. This `padding` is then counteracted on the rows with negative margins. This way, all the content in your columns is visually aligned down the left side.
            - In a grid layout, content must be placed within columns and only columns may be immediate children of rows.
            - Thanks to flexbox, grid columns without a specified `width` will automatically layout as equal width columns. For example, four instances of `.col-sm` will each automatically be 25% wide from the small breakpoint and up. See the [auto-layout columns](#auto-layout-columns) section for more examples.
            - Column classes indicate the number of columns you'd like to use out of the possible 12 per row. So, if you want three equal-width columns across, you can use `.col-4`.
            - Column `width`s are set in percentages, so they're always fluid and sized relative to their parent element.
            - Columns have horizontal `padding` to create the gutters between individual columns, however, you can remove the `margin` from rows and `padding` from columns with `.no-gutters` on the `.row`.
            - To make the grid responsive, there are five grid breakpoints, one for each [responsive breakpoint]({{< docsref "/layout/overview#responsive-breakpoints" >}}): all breakpoints (extra small), small, medium, large, and extra large.
            - Grid breakpoints are based on minimum width media queries, meaning **they apply to that one breakpoint and all those above it** (e.g., `.col-sm-4` applies to small, medium, large, and extra large devices, but not the first `xs` breakpoint).
            - You can use predefined grid classes (like `.col-4`) or [Sass mixins](#sass-mixins) for more semantic markup.

            Be aware of the limitations and [bugs around flexbox](https://github.com/philipwalton/flexbugs), like the [inability to use some HTML elements as flex containers](https://github.com/philipwalton/flexbugs#flexbug-9).

            ## Grid options

            While Bootstrap uses `em`s or `rem`s for defining most sizes, `px`s are used for grid breakpoints and container widths. This is because the viewport width is in pixels and does not change with the [font size](https://drafts.csswg.org/mediaqueries-3/#units).

            See how aspects of the Bootstrap grid system work across multiple devices with a handy table.

  .container.main-content
    .row
      .col-12

        table.table.table-bordered.table-striped
          thead
            tr
              th
              th.text-center
                | Extra small
                br
                small <576px
              th.text-center
                | Small
                br
                small ≥576px
              th.text-center
                | Medium
                br
                small ≥768px
              th.text-center
                | Large
                br
                small ≥992px
              th.text-center
                | Extra large
                br
                small ≥1200px
          tbody
            tr
              th.text-nowrap(scope="row") Max container width
              td None (auto)
              td 540px
              td 720px
              td 960px
              td 1140px
            tr
              th.text-nowrap(scope="row") Class prefix
              td
                code .col-
              td
                code .col-sm-
              td
                code .col-md-
              td
                code .col-lg-
              td
                code .col-xl-
            tr
              th.text-nowrap(scope="row") # of columns
              td(colspan="5") 12
            tr
              th.text-nowrap(scope="row") Gutter width
              td(colspan="5") 30px (15px on each side of a column)
            tr
              th.text-nowrap(scope="row") Nestable
              td(colspan="5") Yes
            tr
              th.text-nowrap(scope="row") Column ordering
              td(colspan="5") Yes

  .vr-block.vr-block-lg

  .container.main-content
    .row
      .col-12
        h2.mt-5 Five grid tiers
        p There are five tiers to the Bootstrap grid system, one for each range of devices we support. Each tier starts at a minimum viewport size and automatically applies to the larger devices unless overridden.

        .container-fluid
          .row.mb-3.text-center
            .col-4.themed-grid-col .col-4
            .col-4.themed-grid-col .col-4
            .col-4.themed-grid-col .col-4
          .row.mb-3.text-center
            .col-sm-4.themed-grid-col .col-sm-4
            .col-sm-4.themed-grid-col .col-sm-4
            .col-sm-4.themed-grid-col .col-sm-4
          .row.mb-3.text-center
            .col-md-4.themed-grid-col .col-md-4
            .col-md-4.themed-grid-col .col-md-4
            .col-md-4.themed-grid-col .col-md-4
          .row.mb-3.text-center
            .col-lg-4.themed-grid-col .col-lg-4
            .col-lg-4.themed-grid-col .col-lg-4
            .col-lg-4.themed-grid-col .col-lg-4
          .row.mb-3.text-center
            .col-xl-4.themed-grid-col .col-xl-4
            .col-xl-4.themed-grid-col .col-xl-4
            .col-xl-4.themed-grid-col .col-xl-4
          .row.mb-3.text-center
            .col-xxl-4.themed-grid-col .col-xxl-4
            .col-xxl-4.themed-grid-col .col-xxl-4
            .col-xxl-4.themed-grid-col .col-xxl-4

        h2.mt-5 Three equal columns
        p
          | Get three equal-width columns
          strong  starting at desktops and scaling to large desktops
          | . On mobile devices, tablets and below, the columns will automatically stack.

        .container-fluid
          .row.mb-3.text-center
            .col-md-4.themed-grid-col .col-md-4
            .col-md-4.themed-grid-col .col-md-4
            .col-md-4.themed-grid-col .col-md-4

        h2.mt-5 Three equal columns alternative
        p
          | By using the
          code .row-cols-*
          |  classes, you can easily create a grid with equal columns.

        .container-fluid
          .row.row-cols-md-3.mb-3.text-center
            .col.themed-grid-col
              code .col
              |  child of
              code .row-cols-md-3
            .col.themed-grid-col
              code .col
              |  child of
              code .row-cols-md-3
            .col.themed-grid-col
              code .col
              |  child of
              code .row-cols-md-3

        h2.mt-5 Three unequal columns
        p
          | Get three columns
          strong  starting at desktops and scaling to large desktops
          |  of various widths. Remember, grid columns should add up to twelve for a single horizontal block. More than that, and columns start stacking no matter the viewport.

        .container-fluid
          .row.mb-3.text-center
            .col-md-3.themed-grid-col .col-md-3
            .col-md-6.themed-grid-col .col-md-6
            .col-md-3.themed-grid-col .col-md-3

        h2.mt-5 Two columns
        p
          | Get two columns
          strong  starting at desktops and scaling to large desktops
          | .

        .container-fluid
          .row.mb-3.text-center
            .col-md-8.themed-grid-col .col-md-8
            .col-md-4.themed-grid-col .col-md-4

        h2.mt-5 Full width, single column
        p.text-warning.bg-dark.p-3.rounded-1.mx-3
          | No grid classes are necessary for full-width elements.

        hr.my-3
        h2.mt-5 Two columns with two nested columns
        p
          | Per the documentation, nesting is easy—just put a row of columns within an existing column. This gives you two columns
          strong  starting at desktops and scaling to large desktops
          | , with another two (equal widths) within the larger column.
        p At mobile device sizes, tablets and down, these columns and their nested columns will stack.

        .container-fluid
          .row.mb-3.text-center
            .col-md-8.themed-grid-col
              .pb-3
                .col-md-8
              .row
                .col-md-6.themed-grid-col .col-md-6
                .col-md-6.themed-grid-col .col-md-6
            .col-md-4.themed-grid-col .col-md-4

        hr.my-3

        h2.mt-5 Mixed: mobile and desktop
        p The Bootstrap v5 grid system has six tiers of classes: xs (extra small, this class infix is not used), sm (small), md (medium), lg (large), xl (x-large), and xxl (xx-large). You can use nearly any combination of these classes to create more dynamic and flexible layouts.
        p Each tier of classes scales up, meaning if you plan on setting the same widths for md, lg, xl and xxl, you only need to specify md.

        .container-fluid
          .row.mb-3.text-center
            .col-md-8.themed-grid-col .col-md-8
            .col-6.col-md-4.themed-grid-col .col-6 .col-md-4
          .row.mb-3.text-center
            .col-6.col-md-4.themed-grid-col .col-6 .col-md-4
            .col-6.col-md-4.themed-grid-col .col-6 .col-md-4
            .col-6.col-md-4.themed-grid-col .col-6 .col-md-4
          .row.mb-3.text-center
            .col-6.themed-grid-col .col-6
            .col-6.themed-grid-col .col-6

        hr.my-3
        h2.mt-5 Mixed: mobile, tablet, and desktop

        .container-fluid
          .row.mb-3.text-center
            .col-sm-6.col-lg-8.themed-grid-col .col-sm-6 .col-lg-8
            .col-6.col-lg-4.themed-grid-col .col-6 .col-lg-4
          .row.mb-3.text-center
            .col-6.col-sm-4.themed-grid-col .col-6 .col-sm-4
            .col-6.col-sm-4.themed-grid-col .col-6 .col-sm-4
            .col-6.col-sm-4.themed-grid-col .col-6 .col-sm-4

        hr.my-3
        h2.mt-5 Gutters
        p
          | With
          code .gx-*
          |  classes, the horizontal gutters can be adjusted.

        .container-fluid
          .row.row-cols-1.row-cols-md-3.gx-4.text-center
            .col.themed-grid-col
              code .col
              |  with
              code .gx-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gx-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gx-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gx-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gx-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gx-4
              |  gutters

        p.mt-4
          | Use the
          code .gy-*
          |  classes to control the vertical gutters.

        .container-fluid
          .row.row-cols-1.row-cols-md-3.gy-4.text-center
            .col.themed-grid-col
              code .col
              |  with
              code .gy-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gy-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gy-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gy-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gy-4
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .gy-4
              |  gutters

        p.mt-4
          | With
          code .g-*
          |  classes, the gutters in both directions can be adjusted.

        .container-fluid
          .row.row-cols-1.row-cols-md-3.g-3.text-center
            .col.themed-grid-col
              code .col
              |  with
              code .g-3
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .g-3
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .g-3
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .g-3
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .g-3
              |  gutters
            .col.themed-grid-col
              code .col
              |  with
              code .g-3
              |  gutters

        div.section_intro
          .container-fluid
            .row
              .col-xs-12.col-md-8.offset-md-2.text-center
                h2 Column Height Equalizer
                p
                  | By default, flexbox stretches each flex item to match the height of it&apos;s sibling. The .natural-height row utility class will make each column&apos;s height match it&apos;s content, giving the developer control of the behavior.

            :highlightify(lang="html")
              <div class="container">
                <div class="row">
                  <div class="col">Content of varying height</div>
                  <div class="col">Content of varying height</div>
                  <div class="col">Content of varying height</div>
                </div>
              </div>

            .row.example.hide-xs-only
              .col
                p.p-3 They never said winning was easy.
              .col
                p.p-3
                  | Another one. It’s on you how you want to live your life. Everyone has a choice. I pick my choice, squeaky clean. They don’t want us to eat. The first of the month is coming, we have to get money, we have no choice. Some people can’t handle success, I can.
              .col
                p.p-3
                  | The key to more success is to get a massage once a week, very important, major key, cloth talk.

        .container
          h2 Mobile and desktop
          //  Stack the columns on mobile by making one full-width and the other half-width
          .row
            .col-xs-12.col-md-8 .col-xs-12 .col-md-8
            .col-xs-6.col-md-4 .col-xs-6 .col-md-4
          //  Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop
          .row
            .col-xs-6.col-md-4 .col-xs-6 .col-md-4
            .col-xs-6.col-md-4 .col-xs-6 .col-md-4
            .col-xs-6.col-md-4 .col-xs-6 .col-md-4
          //  Columns are always 50% wide, on mobile and desktop
          .row
            .col-xs-6 .col-xs-6
            .col-xs-6 .col-xs-6
          h2 Mobile, tablet, desktop
          .row
            .col-xs-12.col-sm-6.col-md-8 .col-xs-12 .col-sm-6 .col-md-8
            .col-xs-6.col-md-4 .col-xs-6 .col-md-4
          .row
            .col-xs-6.col-sm-4 .col-xs-6 .col-sm-4
            .col-xs-6.col-sm-4 .col-xs-6 .col-sm-4
            //  Optional: clear the XS cols if their content doesn't match in height
            .clearfix.visible-xs-block
            .col-xs-6.col-sm-4 .col-xs-6 .col-sm-4

  .vr-block.vr-block-lg(style="height:200px;")
