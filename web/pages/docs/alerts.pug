extends ../../layout/doc

append config
  - var icon = "gear"
  - var slug = 'alerts'
  - var parent = 'components'
  - var title = 'Alerts - Components - Mojo Framework'
  - var metaDesc = 'Provide contextual feedback messages for typical user actions with the handful of available and flexible alert messages.'

block content
  +docs-heading('alerts', 'Alerts')

  p.doc-intro
    | Alerts are available for any length of text, as well as an optional close button. For proper styling, use one of the eight #[strong required] contextual classes (e.g.,  #[code `.alert-success`]). For inline dismissal, use the
    a(href="#dismissing") alerts JavaScript plugin
    | .

  :codeblock(lang="html")
    <div class="alert alert-danger" role="alert">
      A simple `danger` alertâ€”check it out!
    </div>

  //-include ../../partials/assistive-color-warning.pug

  +docs-subheading('live-example', 'Live Example')

  .docs-demo
    p
      | Click the button below to show an alert (hidden with inline styles to start), then dismiss (and destroy) it with the built-in close button.

  :codeblock(lang="html")
    <div id="liveAlertPlaceholder"></div>
    <button type="button" class="btn btn-primary" id="liveAlertBtn">Show live alert</button>

  //- stackblitz_add_js="true"

  .docs-demo
    p We use the following JavaScript to trigger our live alert demo:

  :highlightify(lang="js")
    const alertPlaceholder = document.getElementById('liveAlertPlaceholder')

    const alert = (message, type) => {
      const wrapper = document.createElement('div')
      wrapper.innerHTML = [
        `<div class="alert alert-${type} alert-dismissible" role="alert">`,
        `   <div>${message}</div>`,
        '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
        '</div>'
      ].join('')

      alertPlaceholder.append(wrapper)
    }

    const alertTrigger = document.getElementById('liveAlertBtn')
    if (alertTrigger) {
      alertTrigger.addEventListener('click', () => {
        alert('Nice, you triggered this alert message!', 'success')
      })
    }

  +docs-subheading('link-color', 'Link color')

  p Use the #[code `.alert-link`] utility class to quickly provide matching colored links within any alert.

  :codeblock(lang="html")
    <div class="alert alert-dark" role="alert">
      A simple dark alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
    </div>

  +docs-subheading('additional-content', 'Additional content')

  .docs-demo
    p Alerts can also contain additional HTML elements like headings, paragraphs and dividers.

  :codeblock(lang="html")
    <div class="alert alert-success" role="alert">
      <h4 class="alert-heading">Well done!</h4>
      <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>
      <hr>
      <p class="mb-0">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>
    </div>

  +docs-subheading('icons', 'Icons')

  .docs-demo
    p
      | Similarly, you can use
      a(href="/utilities/flex") flexbox utilities
      |  and
      a(href="/modules/icons")  Bootstrap Icons
      |  to create alerts with icons. Depending on your icons and content, you may want to add more utilities or custom styles.

  :codeblock(lang="html")
    <div class="alert alert-primary d-flex align-items-center" role="alert">
      <svg xmlns="http://www.w3.org/2000/svg" class="rif bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
        <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
      </svg>
      <div>
        An example alert with an icon
      </div>
    </div>

  :markdownify
    ### Dismissing

    Using the alert JavaScript plugin, it's possible to dismiss any alert inline. Here's how:

    - Be sure you've loaded the alert plugin, or the compiled Bootstrap JavaScript.
    - Add a [close button]({{< docsref "/components/close-button" >}}) and the `.alert-dismissible` class, which adds extra padding to the right of the alert and positions the close button.
    - On the close button, add the `data-bs-dismiss="alert"` attribute, which triggers the JavaScript functionality. Be sure to use the `<button>` element with it for proper behavior across all devices.
    - To animate alerts when dismissing them, be sure to add the `.fade` and `.show` classes.

    You can see this in action with a live demo:

  :codeblock(lang="html")
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
      <strong>Holy guacamole!</strong> You should check in on some of those fields below.
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>


  .docs-demo
    p.half-lead.p-5.bg-info
      | When an alert is dismissed, the element is completely removed from the page structure. If a keyboard user dismisses the alert using the close button, their focus will suddenly be lost and, depending on the browser, reset to the start of the page/document. For this reason, we recommend including additional JavaScript that listens for the `closed.bs.alert` event and programmatically sets `focus()` to the most appropriate location in the page. If you're planning to move focus to a non-interactive element that normally does not receive focus, make sure to add `tabindex="-1"` to the element.
